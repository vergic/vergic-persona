{"version":3,"sources":["lib/pattern.js","lib/CanvasDraw.js","ducks/assemble.js","ducks/view.js","store.js","components/ColorView.js","components/ImageContainer.js","components/ThresholdSlider.js","components/Main.js","components/ImageLoadedContainer.js","components/FileDropZone.js","components/App.js","serviceWorker.js","index.js"],"names":["patternTemplate","id","selected","width","height","mask","emptyRow","size","Array","fill","pattern","map","empty","row","y","val","x","outerRadius","innerRadius","innerDiameter","dx","dy","dist","Math","sqrt","circleCalc","Object","objectSpread","concat","toConsumableArray","outerDiameter","w","h","b","barCalc","drawOnePattern","imageData","colors","pos","color","c","length","data","CanvasDraw","imageWidth","imageHeight","ctx","columns","patterns","filled","notFilled","backgroundColor","patternImages","imageData0","createImageData","imageData1","forEach","column","cell","pData","patternIndex","putImageData","x0","y0","getRgbColumns","rect","x1","y1","a","rgbaSum","i","nrOfValues","round","getAverageRgb","d","push","getRect","getNewColumns","nbrOfColumns","maxWidth","maxHeight","emptyCol","colIndex","patternWidth","min","floor","random","createColumn","assemble","createSlice","slice","initialState","threshold","count","reducers","updateWithThreshold","state","action","togglePattern","payload","setImageDimensions","setThreshold","setColumns","initPatterns","setColor","_action$payload","colorId","_action$payload$color","r","g","incrementCount","rgbToHex","rgb","hex","Number","toString","selectors","getImageDimensions","createSelector","getColors","colorsCopy","keys","reduce","obj","key","colorArray","_colorArray","slicedToArray","fullColorHex","getCount","updateThreshold","thunk","dispatch","getState","actions","meta","debounce","time","view","blobUrl","setView","setBlobUrl","getView","getBlobUrl","preloadedState","restart","url","window","URL","revokeObjectURL","logger","createLogger","timestamp","duration","collapsed","predicate","reducer","combineReducers","middleware","createDebounce","thunkMiddleware","getDefaultMiddleware","store","configureStore","ColorView","_ref","togglePicker","style","useSelector","shallowEqual","txt","react_default","createElement","className","onClick","ImageContainer","imageLoaded","alt","src","onLoad","Handle","Slider","handle","props","value","dragging","index","restProps","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","visible","placement","assign","ThresholdSlider","useDispatch","rc_slider_es","max","defaultValue","onAfterChange","Main","init","ceil","initWithImageData","_useState","useState","_useState2","pickerOpen","setPickerOpen","updateColor","useEffect","console","log","drawPatternsWithContext","drawOriginal","canvasRef","current","getContext","img","document","getElementById","drawImage","drawPatternImageWithContext","useRef","canvasDimensions","Card_default","bg","components_ImageContainer","canvas","getImageData","Header","Body","Title","Text","components_ThresholdSlider","components_ColorView","react_color_lib","onAccept","onCancel","onChangeComplete","Footer","Button_default","variant","ref","imageRef","imageDoneLoading","naturalWidth","naturalHeight","generateBlobUrl","type","arguments","undefined","blob","Blob","createObjectURL","FileDropZone","progress","setProgress","readFile","file","reader","FileReader","onloadend","e","result","readAsArrayBuffer","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","ImageLoadedContainer","v","App","element","components_FileDropZone","components_Main","Boolean","location","hostname","match","render","es","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78322e11.chunk.js","sourcesContent":["const outerDiameter = 25;\nconst innerDiameter = 12;//13;\nconst diameterRatio = innerDiameter / outerDiameter;\n\nconst patternTemplate = {\n\tid: 'id',\n\tselected: true,\n\twidth: 0,\n\theight: 0,\n\tmask: [],\n};\n\nconst emptyRow = (size) => {\n\treturn Array(size).fill(0);\n};\n\n// Vergic circle math function\nconst circleCalc = (x, y, size) => {\n\tconst outerRadius = (size / 2);\n\tconst innerRadius = outerRadius * diameterRatio;\n\tconst dx = (size / 2) - x;\n\tconst dy = (size / 2) - y;\n\tconst dist = Math.sqrt(dx * dx + dy * dy);\n\treturn dist > innerRadius && dist < outerRadius ? 1 : 0;\n};\n\n// Vergic bar math function\nconst barCalc = (x, y, w, h, b) => {\n\treturn (x < b || y < b || x > w - b || y > h - b) ? 0 : 1;\n};\n\n// Vergic bar math function\nconst _barCalc = (x, y, w, h) => {\n\treturn (x === 0 || y === 0 || x === w - 1 || y === h - 1) ? 0 : 1;\n};\n\n// Create Vergic circle pattern\nconst newCirclePattern = (id, size) => {\n\tconst mask = Array(size).fill([]).map(empty => emptyRow(size))\n\t\t.map((row, y) => row.map((val, x) => circleCalc(x, y, size - 1)));\n\treturn {\n\t\t...patternTemplate,\n\t\tid,\n\t\twidth: size,\n\t\theight: size + 2,\n\t\tmask: [emptyRow(size), ...mask, emptyRow(size)]\n\t};\n};\n\n// Create Vergic bar pattern\nconst newBarPattern = (id, size) => {\n\tconst height = outerDiameter - innerDiameter;\n\tconst mask = Array(height).fill([]).map(empty => emptyRow(size))\n\t\t.map((row, y) => row.map((val, x) => barCalc(x, y, size, height, 2)));\n\n\treturn {\n\t\t...patternTemplate,\n\t\tid,\n\t\twidth: size,\n\t\theight: height + 2,\n\t\tmask: [emptyRow(size), ...mask, emptyRow(size)]\n\t};\n};\n\n// export default pattern;\nexport default {\n\tnewCirclePattern,\n\tnewBarPattern\n};\n\n\n\n\n","const fillRect = (width, height, imageData, rect, color) => {\n\tconst x0 = rect[0] * 4;\n\tconst y0 = rect[1] * width * 4;\n\tconst x1 = rect[2] * 4;\n\tconst y1 = rect[3] * width * 4;\n\tfor (let x = x0; x < x1; x += 4) {\n\t\tfor (let y = y0; y < y1; y += 4 * width) {\n\t\t\tconst pos = x + y;\n\t\t\tfor (let c = 0; c < color.length; c++) {\n\t\t\t\timageData[pos + c] = color[c];\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst drawPattern = (width, height, imageData, cell, patterns, colors) => {\n\tconst pattern = patterns[cell.patternIndex];\n\tconst {mask} = pattern;\n\tlet {x0, y0, x1, y1, filled} = cell;\n\tconst foregroundColor = filled ? colors.filled : colors.notFilled;\n\tconst backgroundColor = colors.backgroundColor;\n\n\tfor (let x = x0; x < x1; x++) {\n\t\tfor (let y = y0; y < y1; y++) {\n\t\t\tconst dx = x * 4;\n\t\t\tconst dy = y * 4 * width;\n\t\t\tconst color = mask[y - y0][x - x0] === 1 ? foregroundColor : backgroundColor;\n\t\t\tconst pos = dx + dy;\n\t\t\tfor (let c = 0; c < color.length; c++) {\n\t\t\t\timageData[pos + c] = color[c];\n\t\t\t}\n\t\t}\n\t}\n};\n\n\nconst drawOnePattern = (pattern, imageData, colors) => {\n\tfor (let y = 0; y < pattern.height; y++) {\n\t\tfor (let x = 0; x < pattern.width; x++) {\n\t\t\tconst dx = x * 4;\n\t\t\tconst dy = y * 4 * pattern.width;\n\t\t\tconst pos = dx + dy;\n\t\t\tconst color = colors[pattern.mask[y][x]];\n\t\t\tfor (let c = 0; c < color.length; c++) {\n\t\t\t\timageData.data[pos + c] = color[c];\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst drawPatternColumnsWithContext = (imageWidth, imageHeight, ctx, columns, patterns, colors) => {\n\t// create pattern images\n\tconst {filled, notFilled, backgroundColor} = colors;\n\tconst patternImages = patterns.map(pattern => {\n\t\tconst imageData0 = ctx.createImageData(pattern.width, pattern.height);\n\t\tdrawOnePattern(pattern, imageData0, [backgroundColor, notFilled]);\n\n\t\tconst imageData1 = ctx.createImageData(pattern.width, pattern.height);\n\t\tdrawOnePattern(pattern, imageData1, [backgroundColor, filled]);\n\n\t\treturn [imageData0, imageData1]\n\t});\n\t// blit patterns\n\tcolumns.forEach(column => column.forEach(cell => {\n\t\tconst pData = patternImages[cell.patternIndex][cell.filled ? 1 : 0];\n\t\tctx.putImageData(pData, cell.x0, cell.y0);\n\t}));\n};\n\nconst drawPatternColumns = (imageWidth, imageHeight, imageData, columns, patterns, colors) => {\n\tcolumns.forEach(column => column.forEach(cell => {\n\t\tdrawPattern(imageWidth, imageHeight, imageData, cell, patterns, colors);\n\t}));\n};\n\nconst drawColumns = (imageWidth, imageHeight, imageData, columns) => {\n\tcolumns.forEach(column => column.forEach(cell => {\n\t\tconst rect = [cell.x0, cell.y0, cell.x1, cell.y1];\n\t\tconst color = cell.color;\n\t\tfillRect(imageWidth, imageHeight, imageData, rect, color);\n\t}));\n};\n\nconst drawSingleColor = (imageWidth, imageHeight, imageData) => {\n\tconst rect = [0, 0, imageWidth, imageHeight];\n\tfillRect(imageWidth, imageHeight, imageData, rect, [255, 0, 0, 255]);\n\n};\n\nexport default {\n\tdrawColumns,\n\tdrawSingleColor,\n\tdrawPatternColumns,\n\tdrawPatternColumnsWithContext\n};\n\n","import {createSlice, createSelector} from \"redux-starter-kit\";\nimport pattern from \"../lib/pattern\";\nimport CanvasDraw from '../lib/CanvasDraw'\n\n\nconst togglePattern = (state, action) => {\n\tstate.patterns[action.payload.id].selected = !state.patterns[action.payload.id].selected;\n};\n\n\nconst getRect = (width, height, d, rect) => {\n\tconst x0 = rect[0] * 4;\n\tconst y0 = rect[1] * width * 4;\n\tconst x1 = rect[2] * 4;\n\tconst y1 = rect[3] * width * 4;\n\tlet a = [];\n\tfor (let x = x0; x < x1; x += 4) {\n\t\tfor (let y = y0; y < y1; y += 4 * width) {\n\t\t\tconst pos = x + y;\n\t\t\tfor (let c = 0; c < 4; c++) {\n\t\t\t\ta.push(d[pos + c]);\n\t\t\t}\n\t\t}\n\t}\n\treturn a;\n};\n\nconst getAverageRgb = (a) => {\n\tlet rgbaSum = [0, 0, 0, 0];\n\tfor (let i = 0; i < a.length; i += 4) {\n\t\tfor (let c = 0; c < rgbaSum.length; c++) {\n\t\t\trgbaSum[c] += a[i + c];\n\t\t}\n\t}\n\tconst nrOfValues = a.length / 4;\n\tfor (let c = 0; c < rgbaSum.length; c++) {\n\t\trgbaSum[c] = Math.round(rgbaSum[c] / nrOfValues);\n\t}\n\treturn rgbaSum;\n};\n\nconst getRgbColumns = (columns, patterns, imageWidth, imageHeight, imageData) => {\n\treturn columns.map((column) => column.map((cell) => {\n\t\tconst rect = [cell.x0, cell.y0, cell.x1, cell.y1];\n\t\tconst rectData = getRect(imageWidth, imageHeight, imageData, rect);\n\t\tconst color = getAverageRgb(rectData);\n\t\treturn {\n\t\t\t...cell,\n\t\t\tcolor\n\t\t};\n\t}));\n};\n\nconst createColumn = (colIndex, maxWidth, maxHeight, patterns) => {\n\tlet a = [];\n\tlet y0 = 0;\n\tlet y1 = 0;\n\tconst patternWidth = patterns[0].width;\n\tconst x0 = colIndex * patternWidth;\n\tconst x1 = Math.min(x0 + patternWidth, maxWidth);\n\tlet exitMax = 100;\n\twhile (y1 < maxHeight && exitMax > 0) {\n\t\tconst patternIndex = Math.floor(Math.random() * patterns.length);\n\t\tconst pattern = patterns[patternIndex];\n\t\ty1 = Math.min(y0 + pattern.height, maxHeight);\n\t\tconst cell = {\n\t\t\tpatternIndex,\n\t\t\tcolor: [0, 0, 0, 0],\n\t\t\tfilled: false,\n\t\t\tx0,\n\t\t\ty0,\n\t\t\tx1,\n\t\t\ty1,\n\t\t};\n\t\ta.push(cell);\n\t\ty0 = y1;\n\t\t// exitMax--;\n\t}\n\treturn a;\n};\n\nconst getNewColumns = (nbrOfColumns, maxWidth, maxHeight, patterns) => Array(nbrOfColumns).fill([]).map((emptyCol, colIndex) => createColumn(colIndex, maxWidth, maxHeight, patterns));\n\nconst thresholdFunction = (color, threshold) => {\n\tconst colorSum = color[0] + color[1] + color[2];\n\tconst average = colorSum / 3;\n\treturn average < threshold;\n};\n\nconst updateWithThreshold = (state, action) => {\n\tstate.columns = state.columns.map(column => column.map(cell => {\n\t\treturn {\n\t\t\t...cell,\n\t\t\tfilled: thresholdFunction(cell.color, state.threshold)\n\t\t}\n\t}));\n};\n\nconst setImageDimensions = (state, action) => {\n\tstate.imageWidth = action.payload.width;\n\tstate.imageHeight = action.payload.height;\n};\n\nconst setThreshold = (state, action) => {\n\tstate.threshold = action.payload;\n};\n\nconst setColumns = (state, action) => {\n\tstate.columns = action.payload;\n};\n\nconst setColor = (state, action) => {\n\tconst {colorId, color: {r, g, b}} = action.payload;\n\tstate.colors[colorId] = [r, g, b, 255];\n};\n\nconst initPatterns = (state, action) => {\n\tconst patternWidth = action.payload;\n\tstate.patterns = [pattern.newCirclePattern('circle', patternWidth), pattern.newBarPattern('bar', patternWidth)];\n};\n\nconst incrementCount = (state, action) => {\n\tstate.count++;\n};\n\nconst initialState = {\n\timageWidth: 0,\n\timageHeight: 0,\n\tcolumns: [],\n\tpatternWidth: 0,\n\tpatterns: [],\n\tthreshold: 127,\n\tcolors: {\n\t\tfilled: [24, 65, 74, 255],\n\t\tnotFilled: [54, 170, 192, 255],\n\t\tbackgroundColor: [83, 201, 224, 255],\n\n\t},\n\tcount: 0\n};\n\nexport const assemble = createSlice({\n\tslice: 'assemble',\n\tinitialState,\n\treducers: {\n\t\t// init,\n\t\tupdateWithThreshold,\n\t\ttogglePattern,\n\t\tsetImageDimensions,\n\t\tsetThreshold,\n\t\tsetColumns,\n\t\tinitPatterns,\n\t\tsetColor,\n\t\tincrementCount,\n\t}\n});\nconst rgbToHex = function (rgb) {\n\tlet hex = Number(rgb).toString(16);\n\tif (hex.length < 2) {\n\t\thex = \"0\" + hex;\n\t}\n\treturn hex;\n};\nconst fullColorHex = function (colorArray) {\n\tconst [r, g, b] = colorArray;\n\tconst red = rgbToHex(r);\n\tconst green = rgbToHex(g);\n\tconst blue = rgbToHex(b);\n\treturn red + green + blue;\n};\nassemble.selectors = {\n\tgetImageDimensions: createSelector(\n\t\t['assemble.imageWidth', 'assemble.imageHeight'],\n\t\t(imageWidth, imageHeight) => {\n\t\t\treturn {imageWidth, imageHeight};\n\t\t}\n\t),\n\tgetColors: createSelector(\n\t\t['assemble.colors'],\n\t\t(colors) => {\n\t\t\tconst colorsCopy = {...colors};\n\t\t\treturn Object.keys(colorsCopy).reduce((obj, key) => {\n\t\t\t\tobj[key] = '#' + fullColorHex(obj[key]);\n\t\t\t\treturn obj;\n\t\t\t}, colorsCopy)\n\t\t}\n\t),\n\tgetCount: createSelector(\n\t\t['assemble.count'],\n\t\t(count) => {\n\t\t\treturn count;\n\t\t}\n\t)\n};\n\n// Thunks\nexport const initWithImageData = (imageData) => (dispatch, getState) => {\n\n\tlet state = getState().assemble;\n\tconst patternWidth = Math.round(state.imageWidth / 52);\n\tdispatch(assemble.actions.initPatterns(patternWidth));\n\n\tstate = getState().assemble;\n\n\tconst nbrOfColumns = Math.ceil(state.imageWidth / state.patterns[0].width);\n\tlet columns = getNewColumns(nbrOfColumns, state.imageWidth, state.imageHeight, state.patterns);\n\tcolumns = getRgbColumns(columns, state.patterns, state.imageWidth, state.imageHeight, imageData);\n\tdispatch(assemble.actions.setColumns(columns));\n\tdispatch(assemble.actions.incrementCount());\n};\n\nexport const drawBlocksImage = (imageData) => (dispatch, getState) => {\n\tconst state = getState().assemble;\n\tCanvasDraw.drawColumns(state.imageWidth, state.imageHeight, imageData, state.columns);\n};\n\nexport const drawPatternImage = (imageData) => (dispatch, getState) => {\n\tdispatch(assemble.actions.updateWithThreshold());\n\tconst state = getState().assemble;\n\tCanvasDraw.drawPatternColumns(state.imageWidth, state.imageHeight, imageData, state.columns, state.patterns, state.colors);\n};\n\nexport const drawPatternImageWithContext = (ctx) => (dispatch, getState) => {\n\tdispatch(assemble.actions.updateWithThreshold());\n\tconst state = getState().assemble;\n\tCanvasDraw.drawPatternColumnsWithContext(state.imageWidth, state.imageHeight, ctx, state.columns, state.patterns, state.colors);\n};\n\nexport const updateColor = (colorId, color) => {\n\tconst thunk = (dispatch, getState) => {\n\t\tdispatch(assemble.actions.setColor({colorId, color}));\n\t\tdispatch(assemble.actions.incrementCount());\n\t};\n\n\tthunk.meta = {\n\t\tdebounce: {\n\t\t\ttime: 100,\n\t\t\tkey: 'updateColor' + colorId\n\t\t}\n\t};\n\treturn thunk;\n};\n\nexport const updateThreshold = (threshold) => {\n\tconst thunk = (dispatch, getState) => {\n\t\tdispatch(assemble.actions.setThreshold(threshold));\n\t\tdispatch(assemble.actions.incrementCount());\n\t};\n\n\tthunk.meta = {\n\t\tdebounce: {\n\t\t\ttime: 100,\n\t\t\tkey: 'updateThreshold '\n\t\t}\n\t};\n\treturn thunk;\n};","import {createSlice, createSelector} from \"redux-starter-kit\";\n\n\n// use as thunk for later if needed\nconst revokeBlobUrl = (url) => {\n\twindow.URL.revokeObjectURL(url);\n};\n\n\nexport const initialState = {\n\tview: 'dropzone',\n\tblobUrl: '',\n\timageWidth: 0,\n\timageHeight: 0,\n};\n\nconst setBlobUrl = (state, action) => {\n\tstate.blobUrl = action.payload;\n};\n\nconst setView = (state, action) => {\n\tstate.view = action.payload;\n};\n\nconst setImageDimensions = (state, action) => {\n\tstate.imageWidth = action.payload.width;\n\tstate.imageHeight = action.payload.height;\n};\n\nexport const view = createSlice({\n\tslice: 'view',\n\tinitialState,\n\treducers: {\n\t\tsetView,\n\t\tsetBlobUrl,\n\t\tsetImageDimensions\n\t}\n});\nview.selectors = {\n\tgetView: createSelector(\n\t\t['view.view'],\n\t\t(view) => {\n\t\t\treturn view;\n\t\t}\n\t),\n\tgetBlobUrl: createSelector(\n\t\t['view.blobUrl'],\n\t\t(blobUrl) => {\n\t\t\treturn blobUrl;\n\t\t}\n\t),\n};\n\n\n// Thunks\nexport const restart = () => (dispatch, getState) => {\n\trevokeBlobUrl(getState().view.blobUrl);\n\tdispatch(view.actions.setView('dropzone'));\n};\n\n\n\n\n","import {configureStore, getDefaultMiddleware, createReducer, createAction} from 'redux-starter-kit'\nimport {combineReducers} from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport {createLogger} from 'redux-logger'\nimport createDebounce from 'redux-debounced';\nimport {assemble} from './ducks/assemble'\nimport {view} from './ducks/view'\n\nconst initialState = {};\n// patterns: [],\n// columns: [],\n// };\n\n\nconst logger2 = ({getState}) => {\n\treturn (next) => (action) => {\n\n\t\tconsole.log('logger', action);\n\t\tconst returnValue = next(action);\n\t\tconst nextState = getState();\n\n\t\treturn returnValue\n\t}\n};\n\n\nconst logger = createLogger({\n\ttimestamp: true,\n\tduration: true,\n\tcollapsed: true,\n\tpredicate: true,\n});\n\nconst reducer = combineReducers({\n\tassemble: assemble.reducer,\n\tview: view.reducer\n});\n\n// const middleware = [thunkMiddleware, logger, createDebounce, ...getDefaultMiddleware()];\nconst middleware = [createDebounce(), thunkMiddleware, logger, ...getDefaultMiddleware()];\nconst configureAppStore = (preloadedState) => {\n\tconst store = configureStore({\n\t\treducer,\n\t\tmiddleware,\n\t\tpreloadedState,\n\t});\n\n\t// if (process.env.NODE_ENV !== 'production' && module.hot) {\n\t// \tmodule.hot.accept('./reducers', () => store.replaceReducer(reducer))\n\t// }\n\n\treturn store\n};\n\nconst store = configureAppStore(initialState);\n\nexport default store;\n","import React from \"react\";\nimport {useSelector, shallowEqual} from 'react-redux'\nimport {assemble} from '../ducks/assemble'\n\n\nfunction ColorView({colorId, togglePicker}) {\n\n\tconst color = useSelector(assemble.selectors.getColors, shallowEqual)[colorId];\n\tconst style = {\n\t\tbackgroundColor: color\n\t};\n\tconst txt = {\n\t\tfilled: 'filled',\n\t\tnotFilled: 'empty',\n\t\tbackgroundColor: 'background'\n\t}[colorId];\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<div className=\"color-box\" style={style} onClick={() => togglePicker(colorId)}>\n\t\t\t\t{txt}\n\t\t\t</div>\n\n\t\t</div>\n\t)\n}\n\nexport default ColorView;\n\n","import React from \"react\";\n\nfunction ImageContainer({url, id, imageLoaded}) {\n\treturn (\n\t\t<div className=\"image-container\">\n\t\t\t<img alt=\"preview\" id={id} className=\"preview-image\" src={url} onLoad={() => imageLoaded()}/>\n\t\t</div>\n\t)\n}\n\nexport default ImageContainer;\n\n","import React from \"react\";\nimport 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport '../App.css';\nimport {useDispatch, useSelector, shallowEqual} from 'react-redux'\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\n\nimport {updateThreshold} from '../ducks/assemble'\n\nconst Handle = Slider.Handle;\n\nconst handle = (props) => {\n\tconst {value, dragging, index, ...restProps} = props;\n\treturn (\n\t\t<Tooltip\n\t\t\tprefixCls=\"rc-slider-tooltip\"\n\t\t\toverlay={value}\n\t\t\tvisible={dragging}\n\t\t\tplacement=\"top\"\n\t\t\tkey={index}\n\t\t>\n\t\t\t<Handle value={value} {...restProps} />\n\t\t</Tooltip>\n\t);\n};\n\n\nfunction ThresholdSlider() {\n\tconst dispatch = useDispatch();\n\tconst setThreshold = (v) => {\n\t\tdispatch(updateThreshold(v));\n\t};\n\n\treturn (\n\t\t<div className=\"slider\">\n\t\t\t<Slider min={0} max={255} defaultValue={127} handle={handle}\n\t\t\t        onAfterChange={(value) => setThreshold(value)}/>\n\t\t</div>\n\t);\n}\n\nexport default ThresholdSlider;\n\n","import React, {useRef, useState, useEffect} from \"react\";\nimport {useDispatch, useSelector, shallowEqual} from 'react-redux'\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport {PhotoshopPicker} from 'react-color'\nimport ColorView from './ColorView'\nimport ImageContainer from './ImageContainer'\nimport ThresholdSlider from './ThresholdSlider'\nimport {\n\tassemble,\n\tinitWithImageData,\n\tdrawBlocksImage,\n\tdrawPatternImage,\n\tdrawPatternImageWithContext,\n\tupdateColor\n} from '../ducks/assemble'\nimport {view, restart} from '../ducks/view'\n\nconst Main = () => {\n\n\tconst dispatch = useDispatch();\n\tconst init = (imageData) => dispatch(initWithImageData(imageData));\n\n\tconst [pickerOpen, setPickerOpen] = useState('');\n\tconst color = useSelector(assemble.selectors.getColors, shallowEqual)[pickerOpen] || '';\n\tconst setColor = (colorId, color) => dispatch(updateColor(colorId, color));\n\n\tconst togglePicker = (colorId) => {\n\t\tconst p = pickerOpen === colorId\n\t\t\t? ''\n\t\t\t: colorId;\n\n\t\tsetPickerOpen(p);\n\t};\n\n\tconst startOver = () => {\n\t\tdispatch(restart());\n\t};\n\n\tconst count = useSelector(assemble.selectors.getCount, shallowEqual);\n\tuseEffect(\n\t\t() => {\n\t\t\tconsole.log('draw');\n\t\t\tdrawPatternsWithContext();\n\t\t\treturn () => console.log('clean');\n\t\t}, [count]);\n\n\tconst imageLoaded = () => {\n\t\tconst {imageWidth, imageHeight} = canvasDimensions;\n\t\tconst canvas = canvasRef.current;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tctx.canvas.width = imageWidth;\n\t\tctx.canvas.height = imageHeight;\n\t\tdrawOriginal();\n\t\tconst imageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n\t\tinit(imageData.data);\n\t};\n\n\tconst drawOriginal = () => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst img = document.getElementById('orig');\n\t\tctx.drawImage(img, 0, 0);\n\t};\n\n\tconst drawBlocks = () => {\n\t\tconst {imageWidth, imageHeight} = canvasDimensions;\n\t\tconst canvas = canvasRef.current;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst imageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n\t\tdispatch(drawBlocksImage(imageData.data));\n\t\tctx.putImageData(imageData, 0, 0);\n\t};\n\n\tconst drawPatterns = () => {\n\t\tconst {imageWidth, imageHeight} = canvasDimensions;\n\t\tconst canvas = canvasRef.current;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst imageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n\t\tdispatch(drawPatternImage(imageData.data));\n\t\tctx.putImageData(imageData, 0, 0);\n\t};\n\n\tconst drawPatternsWithContext = () => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tdispatch(drawPatternImageWithContext(ctx));\n\t};\n\n\tconst blobUrl = useSelector(view.selectors.getBlobUrl, shallowEqual);\n\tconst canvasRef = useRef(null);\n\tconst canvasDimensions = useSelector(assemble.selectors.getImageDimensions, shallowEqual);\n\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<Card className=\"card\" bg=\"success\" style={{width: '28rem'}}>\n\t\t\t\t<ImageContainer url={blobUrl} id={'orig'} imageLoaded={imageLoaded}/>\n\t\t\t\t<Card.Header>Vergic Persona</Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<Card.Title>Visibility Settings</Card.Title>\n\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\tDrag slider to modify visibility\n\t\t\t\t\t</Card.Text>\n\t\t\t\t\t<ThresholdSlider/>\n\t\t\t\t\t<Card.Title>Color Settings</Card.Title>\n\t\t\t\t\t<div className=\"color-section\">\n\t\t\t\t\t\t<ColorView colorId={'backgroundColor'} togglePicker={togglePicker}/>\n\t\t\t\t\t\t<ColorView colorId={'filled'} togglePicker={togglePicker}/>\n\t\t\t\t\t\t<ColorView colorId={'notFilled'} togglePicker={togglePicker}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{pickerOpen !== ''\n\t\t\t\t\t\t? (<PhotoshopPicker\n\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\tonAccept={() => togglePicker()}\n\t\t\t\t\t\t\tonCancel={() => togglePicker()}\n\t\t\t\t\t\t\tonChangeComplete={(c) => setColor(pickerOpen, c.rgb)}\n\t\t\t\t\t\t/>)\n\t\t\t\t\t\t: null}\n\t\t\t\t\t{/*<Button variant=\"primary\" onClick={() => drawPatterns()}>Generate</Button>*/}\n\t\t\t\t</Card.Body>\n\t\t\t\t<Card.Footer>\n\t\t\t\t\t<Button variant=\"warning\" onClick={() => startOver()}>start over</Button>\n\t\t\t\t</Card.Footer>\n\t\t\t</Card>\n\t\t\t<div className=\"generated-image-container\">\n\t\t\t\t<canvas\n\t\t\t\t\tclassName=\"preview-image\"\n\t\t\t\t\tref={canvasRef}\n\t\t\t\t\twidth={600}\n\t\t\t\t\theight={600}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Main;\n\n","import React, {useEffect, useRef} from \"react\";\nimport {useDispatch} from 'react-redux'\nimport {assemble} from '../ducks/assemble'\n\nfunction ImageContainer({url, imageLoaded}) {\n\tconst imageRef = useRef(null);\n\tconst dispatch = useDispatch();\n\tconst setImageDimensions = (width, height) => dispatch(assemble.actions.setImageDimensions({width, height}));\n\n\tconst imageDoneLoading = () => {\n\t\tsetImageDimensions(imageRef.current.naturalWidth, imageRef.current.naturalHeight);\n\t\timageLoaded();\n\t};\n\n\t// useEffect(() => {\n\t// \treturn () => setImageDimensions(imageRef.current.naturalWidth, imageRef.current.naturalHeight);\n\t// }, [url]);\n\n\treturn (\n\t\t<div className=\"image-container\">\n\t\t\t<img alt=\"preview\" ref={imageRef} className=\"preview-image\" src={url} onLoad={() => imageDoneLoading()}/>\n\t\t</div>\n\t)\n}\n\nexport default ImageContainer;\n\n","import React, {useCallback, useState} from 'react'\nimport {useDispatch, useSelector, shallowEqual} from 'react-redux'\nimport {useDropzone} from 'react-dropzone'\nimport ImageLoadedContainer from './ImageLoadedContainer'\nimport {view} from '../ducks/view'\nimport {assemble} from '../ducks/assemble'\n\nconst generateBlobUrl = (data, type = 'octet/stream') => {\n\tconst blob = new Blob([data], {type});\n\treturn window.URL.createObjectURL(blob);\n};\n\nfunction FileDropZone() {\n\n\tconst setView = (v) => dispatch(view.actions.setView(v));\n\n\tconst imageLoaded = () => {\n\t\tsetView('main')\n\t};\n\n\tconst dispatch = useDispatch();\n\tconst blobUrl = useSelector(view.selectors.getBlobUrl, shallowEqual);\n\tconst setBlobUrl = (url) => dispatch(view.actions.setBlobUrl(url));\n\n\tconst [progress, setProgress] = useState('waiting');\n\n\tconst readFile = (file) => {\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\t\tconst reader = new FileReader();\n\t\treader.onloadend = (e) => {\n\t\t\tconst blobUrl = generateBlobUrl(reader.result);\n\t\t\tsetProgress('done');\n\t\t\tsetBlobUrl(blobUrl);\n\t\t};\n\t\tsetProgress('loading');\n\t\treader.readAsArrayBuffer(file);\n\t};\n\n\tconst onDrop = useCallback(acceptedFiles => {\n\t\treadFile(acceptedFiles[0]);\n\t});\n\n\tconst {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n\treturn (\n\t\t<div className=\"dropzone-container\" {...getRootProps()}>\n\t\t\t<h1>Vergic Persona</h1>\n\t\t\t<input {...getInputProps()} />\n\t\t\t{\n\t\t\t\tisDragActive ?\n\t\t\t\t\t<p>Drop the image here ...</p> :\n\t\t\t\t\t<p>Drag 'n' drop an image here, or click to select an image</p>\n\t\t\t}\n\t\t\t{progress === 'done'\n\t\t\t\t? <ImageLoadedContainer url={blobUrl} imageLoaded={imageLoaded}/>\n\t\t\t\t: null}\n\t\t</div>\n\t)\n}\n\nexport default FileDropZone;\n","import React from \"react\";\nimport '../App.css';\nimport Button from 'react-bootstrap/Button';\nimport Main from './Main'\nimport FileDropZone from './FileDropZone'\nimport {useDispatch, useSelector, shallowEqual} from 'react-redux'\n\nimport {view} from '../ducks/view'\n\nfunction App() {\n\tconst dispatch = useDispatch();\n\tconst currentView = useSelector(view.selectors.getView, shallowEqual);\n\tconst setView = (v) => dispatch(view.actions.setView(v));\n\n\tlet element = null;\n\tswitch (currentView) {\n\t\tcase 'start':\n\t\t\telement = <div>hello</div>;\n\t\t\tbreak;\n\t\tcase 'dropzone':\n\t\t\telement = <FileDropZone/>;\n\t\t\tbreak;\n\t\tcase 'main':\n\t\t\telement = <Main/>;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\telement = <div>default</div>;\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{element}\n\t\t\t{/*<Button variant=\"primary\" onClick={() => setView('start')}>Start</Button>*/}\n\t\t\t{/*<Button variant=\"primary\" onClick={() => setView('dropzone')}>Dropzone</Button>*/}\n\t\t\t{/*<Button variant=\"primary\" onClick={() => setView('main')}>Main</Button>*/}\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport {render} from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./components/App\";\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nrender(\n\t<Provider store={store}>\n\t\t<App/>\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}